package zad_inventory;

import zad_inventory.config.DBConnection;
import zad_inventory.entity.*;
import zad_inventory.repository.*;
import zad_inventory.service.*;

import javax.persistence.EntityManager;
import java.time.LocalDateTime;
import java.util.InputMismatchException;
import java.util.List;
import java.util.Scanner;

import static zad_inventory.Main.loopLogin;

public class Menus {
    private static final Scanner scanner = new Scanner(System.in);
    private static UsuarioService usuarioService;
    private static ProdutoService produtoService;
    private static SituacaoService situacaoService;
    private static CategoriaRepository categoriaRepo;
    private static UsuarioEntity usuarioLogado;

    // Constantes para formata√ß√£o
    private static final String BORDER = "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó";
    private static final String BORDER_MID = "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£";
    private static final String BORDER_BOTTOM = "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù";
    private static final String HEADER = "‚ïë           ZAD INVENTORY          ‚ïë";

    public static void menuInicial(UsuarioEntity usuario) {
        usuarioLogado = usuario;
        inicializarServicos();

        while (true) {
            clearScreen();
            System.out.println(BORDER);
            System.out.println(HEADER);
            System.out.println(BORDER_MID);
            System.out.println("‚ïë 1. Menu de Produto               ‚ïë");
            System.out.println("‚ïë 2. Menu de Categoria             ‚ïë");
            System.out.println("‚ïë 3. Menu de Situa√ß√£o              ‚ïë");
            System.out.println("‚ïë 4. Menu de Usu√°rios              ‚ïë");
            System.out.println("‚ïë 9. Logout                        ‚ïë");
            System.out.println("‚ïë 0. Sair                          ‚ïë");
            System.out.println(BORDER_BOTTOM);

            int opcao = lerInteiro("..::: Digite sua op√ß√£o: ");

            switch (opcao) {
                case 1 -> menuProdutos();
                case 2 -> menuCategorias();
                case 3 -> {
                    if (verificarPermissaoGerente()) {
                        menuSituacao();
                    }
                }
                case 4 -> {
                    if (verificarPermissaoGerente()) {
                        menuUsuarios();
                    }
                }
                case 9 -> {
                    System.out.println("\nüîì Logout efetuado.\n");
                    loopLogin(null);
                    return;
                }
                case 0 -> {
                    System.out.println("üëã Encerrando sistema...");
                    fecharServicos();
                    System.exit(0);
                }
                default -> System.out.println("Op√ß√£o inv√°lida.");
            }
        }
    }

    // ========== M√âTODOS AUXILIARES ==========
    private static void inicializarServicos() {
        EntityManager em = DBConnection.getEntityManager();
        usuarioService = new UsuarioService(new UsuarioRepository(em));
        produtoService = new ProdutoService();
        situacaoService = new SituacaoService(new SituacaoRepository(em));
        categoriaRepo = new CategoriaRepository(em);
    }

    private static void fecharServicos() {
        DBConnection.close();
    }

    private static boolean verificarPermissaoGerente() {
        if (usuarioLogado.getTipoUsuario() != UsuarioEntity.TipoUsuario.GERENTE) {
            System.out.println("‚ùå Acesso negado. Permiss√£o de gerente requerida.");
            aguardarEnter();
            return false;
        }
        return true;
    }

    private static int lerInteiro(String mensagem) {
        while (true) {
            try {
                System.out.print(mensagem);
                return scanner.nextInt();
            } catch (InputMismatchException e) {
                System.out.println("Entrada inv√°lida. Digite um n√∫mero.");
                scanner.nextLine();
            }
        }
    }

    private static void aguardarEnter() {
        System.out.println("\n..::: Pressione Enter para continuar...");
        scanner.nextLine();
        scanner.nextLine();
    }

    private static void clearScreen() {
        System.out.print("\033[H\033[2J");
        System.out.flush();
    }

    // ========== MENU DE PRODUTOS ==========
    public static void menuProdutos() {
        while (true) {
            clearScreen();
            System.out.println(BORDER);
            System.out.println("‚ïë         MENU DE PRODUTOS         ‚ïë");
            System.out.println(BORDER_MID);
            System.out.println("‚ïë 1. Criar produto                 ‚ïë");
            System.out.println("‚ïë 2. Listar produtos               ‚ïë");
            System.out.println("‚ïë 3. Editar produto                ‚ïë");
            System.out.println("‚ïë 4. Excluir produto               ‚ïë");
            System.out.println("‚ïë 5. Buscar por nome               ‚ïë");
            System.out.println("‚ïë 6. Buscar por categoria          ‚ïë");
            System.out.println("‚ïë 7. Gerenciar estoque             ‚ïë");
            System.out.println("‚ïë 0. Voltar                        ‚ïë");
            System.out.println(BORDER_BOTTOM);

            int opcao = lerInteiro("..::: Digite sua op√ß√£o: ");
            scanner.nextLine(); // Limpar buffer

            switch (opcao) {
                case 1 -> criarProduto();
                case 2 -> listarProdutos();
                case 3 -> editarProduto();
                case 4 -> excluirProduto();
                case 5 -> buscarProdutoPorNome();
                case 6 -> buscarProdutoPorCategoria();
                case 7 -> gerenciarEstoque();
                case 0 -> { return; }
                default -> System.out.println("Op√ß√£o inv√°lida.");
            }
            aguardarEnter();
        }
    }

    private static void criarProduto() {
        System.out.println("\n=== NOVO PRODUTO ===");
        ProdutoEntity novo = new ProdutoEntity();

        System.out.print("Nome: ");
        novo.setNomeProduto(scanner.nextLine());

        System.out.print("Cor: ");
        novo.setCor(scanner.nextLine());

        System.out.print("Tamanho: ");
        novo.setTamanho(scanner.nextLine());

        System.out.print("Quantidade: ");
        novo.setQuantidade(scanner.nextInt());

        System.out.print("ID da Categoria: ");
        novo.setCategoriaId(scanner.nextInt());

        ProdutoEntity salvo = produtoService.salvarProduto(novo);
        System.out.println("‚úÖ Produto criado: ID " + salvo.getId());
    }

    private static void listarProdutos() {
        clearScreen();
        System.out.println(BORDER);
        System.out.println("‚ïë        LISTA DE PRODUTOS         ‚ïë");
        System.out.println(BORDER_MID);

        try {
            List<ProdutoEntity> produtos = produtoService.listarTodos();

            if (produtos.isEmpty()) {
                System.out.println("‚ïë Nenhum produto cadastrado         ‚ïë");
            } else {
                for (ProdutoEntity p : produtos) {
                    System.out.printf("‚ïë ID: %-4d | %-20s  ‚ïë\n", p.getId(), p.getNomeProduto());
                    System.out.printf("‚ïë Qtd: %-3d | Categoria: %-10d ‚ïë\n", p.getQuantidade(), p.getCategoriaId());
                    System.out.printf("‚ïë Cor: %-5s | Tamanho: %-10s ‚ïë\n", p.getCor(), p.getTamanho());
                    System.out.println(BORDER_MID);
                }
            }
        } catch (Exception e) {
            System.out.println("‚ïë Erro ao listar produtos: " + e.getMessage() + " ‚ïë");
        }

        System.out.println(BORDER_BOTTOM);
        aguardarEnter();
    }

    private static void editarProduto() {
        clearScreen();
        System.out.println(BORDER);
        System.out.println("‚ïë        EDITAR PRODUTO         ‚ïë");
        System.out.println(BORDER_MID);

        try {
            listarProdutos();
            System.out.print("‚ïë ID do produto a editar: ");
            Long id = scanner.nextLong();
            scanner.nextLine();

            ProdutoEntity produto = produtoService.buscarPorId(id);
            if (produto == null) {
                System.out.println(BORDER_BOTTOM);
                System.out.println("‚ùå Produto n√£o encontrado!");
                aguardarEnter();
                return;
            }

            System.out.println(BORDER_MID);
            System.out.printf("‚ïë Nome atual: %-30s ‚ïë\n", produto.getNomeProduto());
            System.out.print("‚ïë Novo nome (enter para manter): ");
            String novoNome = scanner.nextLine();
            if (!novoNome.isEmpty()) produto.setNomeProduto(novoNome);

            System.out.printf("‚ïë Quantidade atual: %-30d ‚ïë\n", produto.getQuantidade());
            System.out.print("‚ïë Nova quantidade: ");
            String qtdStr = scanner.nextLine();
            if (!qtdStr.isEmpty()) produto.setQuantidade(Integer.parseInt(qtdStr));

            System.out.printf("‚ïë Categoria atual: %-30d ‚ïë\n", produto.getCategoriaId());
            System.out.print("‚ïë Nova categoria (enter para manter): ");
            String catStr = scanner.nextLine();
            if (!catStr.isEmpty()) produto.setCategoriaId(Integer.parseInt(catStr));

            produtoService.salvarProduto(produto);
            System.out.println(BORDER_BOTTOM);
            System.out.println("‚úÖ Produto atualizado com sucesso!");
        } catch (Exception e) {
            System.out.println(BORDER_BOTTOM);
            System.out.println("‚ùå Erro ao editar: " + e.getMessage());
        }

        aguardarEnter();
    }

    private static void excluirProduto() {
        clearScreen();
        System.out.println(BORDER);
        System.out.println("‚ïë       EXCLUIR PRODUTO        ‚ïë");
        System.out.println(BORDER_MID);

        try {
            listarProdutos();
            System.out.print("‚ïë ID do produto a excluir: ");
            Long id = scanner.nextLong();
            scanner.nextLine();

            if (confirmarAcao("Tem certeza que deseja excluir este produto?")) {
                produtoService.deletarProduto(id);
                System.out.println(BORDER_BOTTOM);
                System.out.println("‚úÖ Produto exclu√≠do com sucesso!");
            } else {
                System.out.println(BORDER_BOTTOM);
                System.out.println("‚ö†Ô∏è Exclus√£o cancelada!");
            }
        } catch (Exception e) {
            System.out.println(BORDER_BOTTOM);
            System.out.println("‚ùå Erro ao excluir: " + e.getMessage());
        }

        aguardarEnter();
    }

    private static void buscarProdutoPorNome() {
        clearScreen();
        System.out.println(BORDER);
        System.out.println("‚ïë     BUSCAR PRODUTO POR NOME   ‚ïë");
        System.out.println(BORDER_MID);

        try {
            System.out.print("‚ïë Digite o nome (ou parte): ");
            String nome = scanner.nextLine();

            List<ProdutoEntity> produtos = produtoService.buscarPorNome(nome);

            if (produtos.isEmpty()) {
                System.out.println("‚ïë Nenhum produto encontrado         ‚ïë");
            } else {
                System.out.println(BORDER_MID);
                for (ProdutoEntity p : produtos) {
                    System.out.printf("‚ïë ID: %-4d | %-20s ‚ïë\n", p.getId(), p.getNomeProduto());
                    System.out.printf("‚ïë Qtd: %-3d | Categoria: %-10d ‚ïë\n", p.getQuantidade(), p.getCategoriaId());
                    System.out.println(BORDER_MID);
                }
            }
        } catch (Exception e) {
            System.out.println("‚ïë Erro na busca: " + e.getMessage() + " ‚ïë");
        }

        System.out.println(BORDER_BOTTOM);
        aguardarEnter();
    }

    private static void buscarProdutoPorCategoria() {
        clearScreen();
        System.out.println(BORDER);
        System.out.println("‚ïë  BUSCAR PRODUTO POR CATEGORIA ‚ïë");
        System.out.println(BORDER_MID);

        try {
            System.out.print("‚ïë ID da categoria: ");
            int categoriaId = scanner.nextInt();
            scanner.nextLine();

            List<ProdutoEntity> produtos = produtoService.buscarPorCategoria(categoriaId);

            if (produtos.isEmpty()) {
                System.out.println("‚ïë Nenhum produto nesta categoria    ‚ïë");
            } else {
                System.out.println(BORDER_MID);
                for (ProdutoEntity p : produtos) {
                    System.out.printf("‚ïë ID: %-4d | %-20s ‚ïë\n", p.getId(), p.getNomeProduto());
                    System.out.printf("‚ïë Qtd: %-3d | Cor: %-10s ‚ïë\n", p.getQuantidade(), p.getCor());
                    System.out.println(BORDER_MID);
                }
            }
        } catch (Exception e) {
            System.out.println("‚ïë Erro na busca: " + e.getMessage() + " ‚ïë");
        }

        System.out.println(BORDER_BOTTOM);
        aguardarEnter();
    }

    private static void gerenciarEstoque() {
        clearScreen();
        System.out.println(BORDER);
        System.out.println("‚ïë       GERENCIAR ESTOQUE       ‚ïë");
        System.out.println(BORDER_MID);
        System.out.println("‚ïë 1 - Adicionar estoque         ‚ïë");
        System.out.println("‚ïë 2 - Remover estoque           ‚ïë");
        System.out.println("‚ïë 0 - Voltar                    ‚ïë");
        System.out.println(BORDER_BOTTOM);

        try {
            System.out.print("..::: Escolha: ");
            int opcao = scanner.nextInt();
            scanner.nextLine();

            if (opcao == 0) return;

            System.out.print("ID do produto: ");
            Long id = scanner.nextLong();
            System.out.print("Quantidade: ");
            int qtd = scanner.nextInt();
            scanner.nextLine();

            if (opcao == 1) {
                produtoService.adicionarEstoque(id, qtd);
                System.out.println("‚úÖ Estoque adicionado!");
            } else if (opcao == 2) {
                produtoService.removerEstoque(id, qtd);
                System.out.println("‚úÖ Estoque removido!");
            } else {
                System.out.println("‚ùå Op√ß√£o inv√°lida!");
            }
        } catch (Exception e) {
            System.out.println("‚ùå Erro: " + e.getMessage());
        }

        aguardarEnter();
    }


    // ... (implementar outros m√©todos de produtos seguindo o mesmo padr√£o)

    // ========== MENU DE CATEGORIAS ==========
    public static void menuCategorias() {
        while (true) {
            clearScreen();
            System.out.println(BORDER);
            System.out.println("‚ïë       MENU DE CATEGORIAS         ‚ïë");
            System.out.println(BORDER_MID);
            System.out.println("‚ïë 1. Criar categoria               ‚ïë");
            System.out.println("‚ïë 2. Listar categorias             ‚ïë");
            System.out.println("‚ïë 3. Editar categoria              ‚ïë");
            System.out.println("‚ïë 4. Excluir categoria             ‚ïë");
            System.out.println("‚ïë 0. Voltar                        ‚ïë");
            System.out.println(BORDER_BOTTOM);

            int opcao = lerInteiro("..::: Digite sua op√ß√£o: ");
            scanner.nextLine();

            switch (opcao) {
                case 1 -> criarCategoria();
                case 2 -> listarCategorias();
                case 3 -> editarCategoria();
                case 4 -> excluirCategoria();
                case 0 -> { return; }
                default -> System.out.println("Op√ß√£o inv√°lida.");
            }
            aguardarEnter();
        }
    }

    private static void criarCategoria() {
        System.out.println("\n=== NOVA CATEGORIA ===");
        CategoriaEntity nova = new CategoriaEntity();

        System.out.print("Nome: ");
        nova.setNome(scanner.nextLine());

        System.out.print("Descri√ß√£o: ");
        nova.setDescricao(scanner.nextLine());

        categoriaRepo.salvar(nova);
        System.out.println("‚úÖ Categoria criada com sucesso!");
    }

    // ========== MENU DE CATEGORIAS - M√âTODOS COMPLETOS ==========

    private static void listarCategorias() {
        clearScreen();
        System.out.println(BORDER);
        System.out.println("‚ïë      LISTA DE CATEGORIAS      ‚ïë");
        System.out.println(BORDER_MID);

        try {
            List<CategoriaEntity> categorias = categoriaRepo.buscarTodos();

            if (categorias.isEmpty()) {
                System.out.println("‚ïë Nenhuma categoria cadastrada       ‚ïë");
            } else {
                for (CategoriaEntity cat : categorias) {
                    System.out.printf("‚ïë ID: %-3d | %-20s ‚ïë\n",
                            cat.getId(), cat.getNome());
                    System.out.printf("‚ïë Descri√ß√£o: %-40s ‚ïë\n",
                            cat.getDescricao());
                    System.out.println(BORDER_MID);
                }
            }
        } catch (Exception e) {
            System.out.println("‚ïë Erro ao listar categorias: " +
                    e.getMessage() + " ‚ïë");
        }

        System.out.println(BORDER_BOTTOM);
        aguardarEnter();
    }

    private static void editarCategoria() {
        clearScreen();
        System.out.println(BORDER);
        System.out.println("‚ïë      EDITAR CATEGORIA       ‚ïë");
        System.out.println(BORDER_MID);

        try {
            // Primeiro lista as categorias para facilitar sele√ß√£o
            listarCategorias();

            System.out.print("‚ïë ID da categoria a editar: ");
            Long id = scanner.nextLong();
            scanner.nextLine(); // Limpar buffer

            CategoriaEntity categoria = categoriaRepo.buscarPorId(id);
            if (categoria == null) {
                System.out.println(BORDER_BOTTOM);
                System.out.println("‚ùå Categoria n√£o encontrada!");
                aguardarEnter();
                return;
            }

            System.out.println(BORDER_MID);
            System.out.printf("‚ïë Nome atual: %-40s ‚ïë\n", categoria.getNome());
            System.out.print("‚ïë Novo nome (enter para manter): ");
            String novoNome = scanner.nextLine();
            if (!novoNome.isBlank()) {
                categoria.setNome(novoNome);
            }

            System.out.printf("‚ïë Descri√ß√£o atual: %-40s ‚ïë\n", categoria.getDescricao());
            System.out.print("‚ïë Nova descri√ß√£o (enter para manter): ");
            String novaDesc = scanner.nextLine();
            if (!novaDesc.isBlank()) {
                categoria.setDescricao(novaDesc);
            }

            categoriaRepo.atualizar(categoria);
            System.out.println(BORDER_BOTTOM);
            System.out.println("‚úÖ Categoria atualizada com sucesso!");
        } catch (Exception e) {
            System.out.println(BORDER_BOTTOM);
            System.out.println("‚ùå Erro ao editar: " + e.getMessage());
        }

        aguardarEnter();
    }

    private static void excluirCategoria() {
        clearScreen();
        System.out.println(BORDER);
        System.out.println("‚ïë      EXCLUIR CATEGORIA       ‚ïë");
        System.out.println(BORDER_MID);

        try {
            // Lista categorias para refer√™ncia
            listarCategorias();

            System.out.print("‚ïë ID da categoria a excluir: ");
            Long id = scanner.nextLong();
            scanner.nextLine(); // Limpar buffer

            // Confirma√ß√£o simples
            if (confirmarAcao("Tem certeza que deseja excluir esta categoria?")) {
                CategoriaEntity categoria = categoriaRepo.buscarPorId(id);
                if (categoria != null) {
                    categoriaRepo.remover(categoria);
                    System.out.println(BORDER_BOTTOM);
                    System.out.println("‚úÖ Categoria exclu√≠da com sucesso!");
                } else {
                    System.out.println(BORDER_BOTTOM);
                    System.out.println("‚ùå Categoria n√£o encontrada!");
                }
            } else {
                System.out.println(BORDER_BOTTOM);
                System.out.println("‚ö†Ô∏è Exclus√£o cancelada!");
            }
        } catch (Exception e) {
            System.out.println(BORDER_BOTTOM);
            System.out.println("‚ùå Erro ao excluir: " + e.getMessage());
        }

        aguardarEnter();
    }

    // ========== MENU DE SITUA√á√ÉO ==========
    public static void menuSituacao() {
        while (true) {
            clearScreen();
            System.out.println(BORDER);
            System.out.println("‚ïë       MENU DE SITUA√á√ÉO           ‚ïë");
            System.out.println(BORDER_MID);
            System.out.println("‚ïë 1. Criar situa√ß√£o                ‚ïë");
            System.out.println("‚ïë 2. Editar situa√ß√£o               ‚ïë");
            System.out.println("‚ïë 3. Listar situa√ß√µes              ‚ïë");
            System.out.println("‚ïë 4. Excluir situa√ß√£o              ‚ïë");
            System.out.println("‚ïë 0. Voltar                        ‚ïë");
            System.out.println(BORDER_BOTTOM);

            int opcao = lerInteiro("..::: Digite sua op√ß√£o: ");
            scanner.nextLine();

            switch (opcao) {
                case 1 -> criarSituacao();
                case 2 -> editarSituacao();
                case 3 -> listarSituacoes();
                case 4 -> excluirSituacao();
                case 0 -> { return; }
                default -> System.out.println("Op√ß√£o inv√°lida.");
            }
            aguardarEnter();
        }
    }

    private static void criarSituacao() {
        System.out.println("\n=== NOVA SITUA√á√ÉO ===");
        SituacaoEntity nova = new SituacaoEntity();

        System.out.print("Nome da situa√ß√£o: ");
        nova.setSituacaoNome(scanner.nextLine());

        System.out.print("ID do produto: ");
        ProdutoEntity produto = produtoService.buscarPorId(scanner.nextLong());
        nova.setProdutoId(Math.toIntExact(produto.getId()));
        nova.setProdutoNome(produto.getNomeProduto());

        System.out.print("Quantidade: ");
        nova.setQuantidade(scanner.nextInt());

        nova.setUsuarioId(Math.toIntExact(usuarioLogado.getId()));
        nova.setUsuarioNome(usuarioLogado.getNome());
        nova.setData(LocalDateTime.now());

        situacaoService.criarSituacao(nova);
        System.out.println("‚úÖ Situa√ß√£o registrada com sucesso!");
    }

    private static void editarSituacao() {
        System.out.println("\n=== EDITAR SITUA√á√ÉO ===");
        System.out.print("ID da situa√ß√£o: ");
        Long id = scanner.nextLong();
        scanner.nextLine();

        SituacaoEntity situacao = situacaoService.buscarSituacaoPorId(id);
        if (situacao == null) {
            System.out.println("Situa√ß√£o n√£o encontrada!");
            return;
        }

        System.out.print("Novo nome (" + situacao.getSituacaoNome() + "): ");
        situacao.setSituacaoNome(scanner.nextLine());

        // Atualizar outros campos conforme necess√°rio

        situacaoService.atualizarSituacao(situacao);
        System.out.println("‚úÖ Situa√ß√£o atualizada!");
    }

    private static void listarSituacoes() {
        List<SituacaoEntity> situacoes = situacaoService.listarTodasSituacoes();
        System.out.println("\n=== LISTA DE SITUA√á√ïES ===");
        for (SituacaoEntity s : situacoes) {
            System.out.printf(
                    "ID: %d | Situa√ß√£o: %s | Produto: %s | Usu√°rio: %s | Qtd: %d | Data: %s\n",
                    s.getId(), s.getSituacaoNome(), s.getProdutoNome(),
                    s.getUsuarioNome(), s.getQuantidade(), s.getData()
            );
        }
    }

    private static void excluirSituacao() {
        System.out.println("\n=== EXCLUIR SITUA√á√ÉO ===");
        System.out.print("ID da situa√ß√£o: ");
        Long id = scanner.nextLong();
        scanner.nextLine();

        if (confirmarAcao("Tem certeza que deseja excluir esta situa√ß√£o?")) {
            situacaoService.removerSituacao(id);
            System.out.println("‚úÖ Situa√ß√£o exclu√≠da!");
        }
    }


    // ========== MENU DE USU√ÅRIOS ==========
    public static void menuUsuarios() {
        while (true) {
            clearScreen();
            System.out.println(BORDER);
            System.out.println("‚ïë        MENU DE USU√ÅRIOS          ‚ïë");
            System.out.println(BORDER_MID);
            System.out.println("‚ïë 1. Listar usu√°rios               ‚ïë");
            System.out.println("‚ïë 2. Registrar usu√°rio             ‚ïë");
            System.out.println("‚ïë 3. Excluir usu√°rio               ‚ïë");
            System.out.println("‚ïë 4. Editar nome                   ‚ïë");
            System.out.println("‚ïë 0. Voltar                        ‚ïë");
            System.out.println(BORDER_BOTTOM);

            int opcao = lerInteiro("..::: Digite sua op√ß√£o: ");
            scanner.nextLine();

            switch (opcao) {
                case 1 -> listarUsuarios();
                case 2 -> registrarUsuario();
                case 3 -> excluirUsuario();
                case 4 -> editarNomeUsuario();
                case 0 -> { return; }
                default -> System.out.println("Op√ß√£o inv√°lida.");
            }
            aguardarEnter();
        }
    }

    private static void listarUsuarios() {
        List<UsuarioEntity> usuarios = usuarioService.listarUsuarios();
        System.out.println("\n=== LISTA DE USU√ÅRIOS ===");
        usuarios.forEach(u -> System.out.printf(
                "ID: %d | Nome: %s | Email: %s | Tipo: %s\n",
                u.getId(), u.getNome(), u.getEmail(), u.getTipoUsuario()
        ));
    }
    // ========== MENU DE USU√ÅRIOS - M√âTODOS COMPLETOS ==========

    private static void registrarUsuario() {
        clearScreen();
        System.out.println(BORDER);
        System.out.println("‚ïë      CADASTRAR NOVO USU√ÅRIO     ‚ïë");
        System.out.println(BORDER_MID);

        UsuarioEntity novoUsuario = new UsuarioEntity();

        try {
            System.out.print("‚ïë Nome completo: ");
            novoUsuario.setNome(scanner.nextLine());

            System.out.print("‚ïë Email: ");
            novoUsuario.setEmail(scanner.nextLine());

            System.out.print("‚ïë Senha: ");
            novoUsuario.setSenha(scanner.nextLine());

            System.out.print("‚ïë Tipo (GERENTE/FUNCIONARIO): ");
            novoUsuario.setTipoUsuario(UsuarioEntity.TipoUsuario.valueOf(
                    scanner.nextLine().toUpperCase()));

            usuarioService.registrarUsuario(novoUsuario, usuarioLogado);

            System.out.println(BORDER_BOTTOM);
            System.out.println("‚úÖ Usu√°rio registrado com sucesso!");
        } catch (IllegalArgumentException e) {
            System.out.println("‚ùå Tipo de usu√°rio inv√°lido! Use GERENTE ou FUNCIONARIO");
        } catch (Exception e) {
            System.out.println("‚ùå Erro ao registrar: " + e.getMessage());
        }
    }

    private static void excluirUsuario() {
        clearScreen();
        System.out.println(BORDER);
        System.out.println("‚ïë        EXCLUIR USU√ÅRIO        ‚ïë");
        System.out.println(BORDER_MID);

        try {
            // Primeiro lista os usu√°rios para facilitar a sele√ß√£o
            listarUsuarios();

            System.out.print("‚ïë ID do usu√°rio a excluir: ");
            Long id = scanner.nextLong();
            scanner.nextLine(); // Limpar buffer

            if (confirmarAcao("Tem certeza que deseja excluir este usu√°rio?")) {
                usuarioService.deletarUsuario(id, usuarioLogado);
                System.out.println(BORDER_BOTTOM);
                System.out.println("‚úÖ Usu√°rio exclu√≠do com sucesso!");
            }
        } catch (Exception e) {
            System.out.println(BORDER_BOTTOM);
            System.out.println("‚ùå Erro ao excluir: " + e.getMessage());
        }
    }

    private static void editarNomeUsuario() {
        clearScreen();
        System.out.println(BORDER);
        System.out.println("‚ïë       EDITAR NOME DE USU√ÅRIO      ‚ïë");
        System.out.println(BORDER_MID);

        try {
            System.out.printf("‚ïë Nome atual: %s\n", usuarioLogado.getNome());
            System.out.print("‚ïë Novo nome: ");
            String novoNome = scanner.nextLine();

            if (!novoNome.isBlank()) {
                usuarioLogado.setNome(novoNome);

                EntityManager em = DBConnection.getEntityManager();
                em.getTransaction().begin();
                em.merge(usuarioLogado);
                em.getTransaction().commit();
                em.close();

                System.out.println(BORDER_BOTTOM);
                System.out.println("‚úÖ Nome atualizado com sucesso!");
            } else {
                System.out.println(BORDER_BOTTOM);
                System.out.println("‚ö†Ô∏è Nome n√£o pode ser vazio!");
            }
        } catch (Exception e) {
            System.out.println(BORDER_BOTTOM);
            System.out.println("‚ùå Erro ao atualizar: " + e.getMessage());
        }
    }

    // M√©todo auxiliar para confirmar a√ß√µes
    private static boolean confirmarAcao(String mensagem) {
        System.out.println(BORDER_MID);
        System.out.printf("‚ïë %s\n", mensagem);
        System.out.println("‚ïë 1 - Sim   2 - N√£o");
        System.out.println(BORDER_BOTTOM);
        System.out.print("..::: Escolha: ");

        int opcao = scanner.nextInt();
        scanner.nextLine(); // Limpar buffer
        return opcao == 1;
    }

}
